#include <SPI.h>
#include <Gamebuino.h>
Gamebuino gb;

const byte rectangleSimple[] PROGMEM = { 9,8,0x00,0x00,0x3C,0x00,0x24,0x00,0x24,0x00,0x24,0x00,0x24,0x00,0x24,0x00,0x3C,0x00 }; 
const byte rondBarre[] PROGMEM = { 9,8,0x00,0x00,0x1C,0x00,0x32,0x00,0x79,0x00,0x5D,0x00,0x4F,0x00,0x26,0x00,0x1C,0x00 }; 
const byte rondCroix[] PROGMEM = { 9,8,0x00,0x00,0x1C,0x00,0x22,0x00,0x49,0x00,0x5D,0x00,0x49,0x00,0x22,0x00,0x1C,0x00 }; 
const byte rondMultip[] PROGMEM = { 9,8,0x00,0x00,0x1C,0x00,0x22,0x00,0x55,0x00,0x49,0x00,0x55,0x00,0x22,0x00,0x1C,0x00 }; 
const byte rondSimple[] PROGMEM = { 9,8,0x00,0x00,0x38,0x00,0x44,0x00,0x82,0x00,0x82,0x00,0x82,0x00,0x44,0x00,0x38,0x00 }; 
const byte trianglePois[] PROGMEM = { 9,8,0x00,0x00,0x00,0x00,0x08,0x00,0x14,0x00,0x2A,0x00,0x55,0x00,0xAA,0x80,0xFF,0x80 }; 
const byte triangleSimple[] PROGMEM = { 9,8,0x00,0x00,0x00,0x00,0x08,0x00,0x14,0x00,0x22,0x00,0x41,0x00,0x80,0x80,0xFF,0x80 }; 
const byte carreCroix[] PROGMEM = { 9,8,0x00,0x00,0xFF,0x00,0x81,0x00,0x99,0x00,0xBD,0x00,0x99,0x00,0x81,0x00,0xFF,0x00 }; 
const byte carreSimple[] PROGMEM = { 9,8,0x00,0x00,0xFF,0x00,0x81,0x00,0x81,0x00,0x81,0x00,0x81,0x00,0x81,0x00,0xFF,0x00 }; 
const byte croixOuverte[] PROGMEM = { 9,8,0x18,0x00,0x18,0x00,0x24,0x00,0xC3,0x00,0xC3,0x00,0x24,0x00,0x18,0x00,0x18,0x00 }; 
const byte croixPleine[] PROGMEM = { 9,8,0x18,0x00,0x18,0x00,0x18,0x00,0xFF,0x00,0xFF,0x00,0x18,0x00,0x18,0x00,0x18,0x00 }; 
const byte rectanglePlein[] PROGMEM = { 9,8,0x00,0x00,0x3C,0x00,0x24,0x00,0x3C,0x00,0x3C,0x00,0x3C,0x00,0x24,0x00,0x3C,0x00 }; 



//const byte client[] PROGMEM = { 76,29,0xC2,0x18,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x3B,0xCE,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x65,0xEE,0x7A,0x00,0x00,0x01,0xFF,0xFE,0x00,0x00,0x5E,0xC6,0x62,0x00,0x00,0x3F,0x00,0x03,0xF8,0x00,0x4A,0x01,0x43,0xC0,0x07,0xC0,0x00,0x00,0x0E,0x00,0x68,0x00,0x00,0xC0,0x3C,0x00,0x00,0x00,0x03,0x00,0x29,0xE1,0xE0,0x80,0xE0,0x00,0x00,0x00,0x00,0xC0,0x20,0x00,0x01,0x81,0x80,0x00,0x00,0x00,0x00,0x60,0x31,0xC0,0xE1,0x03,0x00,0x00,0x00,0x00,0x00,0x20,0x12,0x61,0x33,0x02,0x00,0x00,0x00,0x00,0x00,0x30,0x12,0x21,0x16,0x02,0x00,0x00,0x00,0x00,0x00,0x10,0x11,0xC0,0xE4,0x06,0x00,0x00,0x00,0x00,0x00,0x10,0x18,0x08,0x04,0x0C,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x08,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x18,0x0C,0x0C,0x30,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x0C,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x0C,0x08,0x5F,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x08,0xF3,0x00,0x00,0x00,0x00,0x00,0x10,0x19,0x00,0x4C,0x06,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0xFF,0x84,0x04,0x00,0x00,0x00,0x00,0x00,0x10,0x0C,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x30,0x04,0x00,0x0C,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x06,0x00,0x18,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x07,0xF0,0x70,0x04,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0x1F,0xC0,0x07,0xFC,0x00,0x00,0x00,0x07,0x00,0x00,0x63,0x00,0x00,0x03,0xC0,0x00,0x00,0x1C,0x00,0x00,0x5D,0x00,0x00,0x00,0x7C,0x00,0x03,0xF0,0x00,0x00,0x5D,0x00,0x00,0x00,0x07,0xFF,0xFE,0x00,0x00,0x00,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 
//const byte happyClient[] PROGMEM = { 76,29,0xC2,0x18,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x3B,0xCE,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x65,0xEE,0x7A,0x00,0x00,0x01,0xFF,0xFE,0x00,0x00,0x5E,0xC6,0x62,0x00,0x00,0x3F,0x00,0x03,0xF8,0x00,0x4A,0x01,0xC3,0xC0,0x07,0xC0,0x00,0x00,0x0E,0x00,0x68,0x20,0x80,0xC0,0x3C,0x00,0x00,0x00,0x03,0x00,0x29,0xC0,0x70,0x80,0xE0,0x00,0x00,0x00,0x00,0xC0,0x22,0x00,0x09,0x81,0x80,0x00,0x00,0x00,0x00,0x60,0x31,0xC0,0xE1,0x03,0x08,0xBE,0xF0,0xE7,0x28,0x20,0x12,0x21,0x13,0x02,0x0D,0xA0,0x89,0x12,0x28,0x30,0x12,0xA1,0x56,0x02,0x0A,0xA0,0x89,0x02,0x28,0x10,0x11,0xC0,0xE4,0x06,0x0A,0xBC,0xF1,0x02,0x28,0x10,0x18,0x08,0x04,0x0C,0x08,0xA0,0xA1,0x02,0x28,0x10,0x08,0x08,0x04,0x10,0x08,0xA0,0x91,0x12,0x00,0x10,0x18,0x0C,0x0C,0x30,0x08,0xBE,0x88,0xE7,0x28,0x10,0x10,0x0C,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x0C,0x08,0x5F,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x08,0xF3,0x00,0x00,0x00,0x00,0x00,0x10,0x19,0xC0,0xEC,0x06,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x80,0x44,0x04,0x00,0x00,0x00,0x00,0x00,0x10,0x0C,0x80,0x44,0x04,0x00,0x00,0x00,0x00,0x00,0x30,0x04,0xFF,0xCC,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x06,0x00,0x18,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x07,0xF0,0x70,0x04,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0x1F,0xC0,0x07,0xFC,0x00,0x00,0x00,0x07,0x00,0x00,0x63,0x00,0x00,0x03,0xC0,0x00,0x00,0x1C,0x00,0x00,0x5D,0x00,0x00,0x00,0x7C,0x00,0x03,0xF0,0x00,0x00,0x5D,0x00,0x00,0x00,0x07,0xFF,0xFE,0x00,0x00,0x00,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 
//const byte notHappyClient[] PROGMEM = { 76,29,0xC2,0x18,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x3B,0xCE,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x65,0xEE,0x7A,0x00,0x00,0x01,0xFF,0xFE,0x00,0x00,0x5E,0xC6,0x62,0x00,0x00,0x3F,0x00,0x03,0xF8,0x00,0x4A,0x00,0x03,0xC0,0x07,0xC0,0x00,0x00,0x0E,0x00,0x68,0x00,0x00,0xC0,0x3C,0x00,0x00,0x00,0x03,0x00,0x29,0xE1,0xE0,0x80,0xE0,0x00,0x00,0x00,0x00,0xC0,0x20,0x33,0x01,0x81,0x81,0x13,0x91,0x45,0x10,0x60,0x31,0xC0,0xE1,0x03,0x01,0x14,0x51,0x45,0x10,0x20,0x12,0x21,0x13,0x02,0x01,0x14,0x51,0x45,0x10,0x30,0x12,0x61,0x36,0x02,0x01,0xF4,0x51,0x45,0x10,0x10,0x11,0xC0,0xE4,0x06,0x01,0x14,0x55,0x55,0x50,0x10,0x18,0x08,0x04,0x0C,0x01,0x14,0x55,0x55,0x50,0x10,0x08,0x08,0x04,0x10,0x01,0x13,0x8A,0x28,0xA0,0x10,0x18,0x0C,0x0C,0x30,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x0C,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x0C,0x08,0x5F,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x08,0xF3,0x00,0x00,0x00,0x00,0x00,0x10,0x18,0x7F,0x8C,0x06,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x80,0x44,0x04,0x00,0x00,0x00,0x00,0x00,0x10,0x0C,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x30,0x04,0x00,0x0C,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x06,0x00,0x18,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x07,0xF0,0x70,0x04,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0x1F,0xC0,0x07,0xFC,0x00,0x00,0x00,0x07,0x00,0x00,0x63,0x00,0x00,0x03,0xC0,0x00,0x00,0x1C,0x00,0x00,0x5D,0x00,0x00,0x00,0x7C,0x00,0x03,0xF0,0x00,0x00,0x5D,0x00,0x00,0x00,0x07,0xFF,0xFE,0x00,0x00,0x00,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 

const byte cornet[] PROGMEM = { 11,6,0xFF,0xE0,0x55,0x40,0x2A,0x80,0x15,0x00,0x0A,0x00,0x04,0x00 }; 
const byte luxeCornet[] PROGMEM = { 11,9,0xFF,0xE0,0x55,0x40,0x2A,0x80,0x15,0x00,0x0A,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x1F,0x00 }; 
const byte pot[] PROGMEM = { 12,5,0xFF,0xF0,0xE0,0x70,0x70,0xE0,0x3F,0xC0,0x1F,0x80 }; 


const byte bulleVide[] PROGMEM = { 52,27,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,0x00,0x01,0xFF,0x7E,0x00,0x00,0x00,0x00,0x3F,0x00,0x03,0xF8,0x00,0x00,0x07,0xC0,0x00,0x00,0x0E,0x00,0x00,0x3C,0x00,0x00,0x00,0x03,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x60,0x03,0x00,0x00,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x00,0x00,0x00,0x30,0x02,0x00,0x00,0x00,0x00,0x00,0x10,0x06,0x00,0x00,0x00,0x00,0x00,0x10,0x0C,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x30,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x10,0x5F,0x00,0x00,0x00,0x00,0x00,0x10,0xF3,0x00,0x00,0x00,0x00,0x00,0x10,0x06,0x00,0x00,0x00,0x00,0x00,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x30,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x01,0xC0,0x07,0xFC,0x00,0x00,0x00,0x07,0x00,0x00,0x03,0xC0,0x00,0x00,0x1C,0x00,0x00,0x00,0x7C,0x00,0x03,0xF0,0x00,0x00,0x00,0x07,0xFF,0xFE,0x00,0x00 }; 


const byte p1C[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x02,0x03,0xC0,0x00,0x06,0x07,0x80,0x00,0x07,0x3F,0x80,0x00,0x0F,0xFF,0x80,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x3F,0xFF,0xFF,0x80,0x3F,0xFF,0xFF,0x80,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x80,0xFE,0xF7,0xEF,0x00,0x7E,0x72,0xCE,0x00,0x3E,0x30,0xC8,0x00,0x3C,0x10,0x88,0x00,0x1E,0x00,0x08,0x00,0x0E,0x00,0x08,0x00,0x06,0x00,0x08,0x00,0x04,0x21,0x10,0x00,0x02,0x3F,0x10,0x00,0x02,0x00,0x20,0x00,0x01,0x00,0x40,0x00,0x00,0xE1,0x80,0x00,0x00,0x1E,0x00,0x00 }; 
const byte p1N[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x02,0x03,0xC0,0x00,0x06,0x07,0x80,0x00,0x07,0x3F,0x80,0x00,0x0F,0xFF,0x80,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x3F,0xFF,0xFF,0x80,0x3F,0xFF,0xFF,0x80,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x80,0xFE,0xF7,0xEF,0x00,0x7E,0x72,0xCE,0x00,0x3E,0x30,0xC8,0x00,0x3C,0x10,0x88,0x00,0x1E,0x00,0x08,0x00,0x0E,0x00,0x08,0x00,0x06,0x00,0x08,0x00,0x04,0x1E,0x10,0x00,0x02,0x09,0x10,0x00,0x02,0x07,0x20,0x00,0x01,0x00,0x40,0x00,0x00,0xE1,0x80,0x00,0x00,0x1E,0x00,0x00 }; 
const byte p1PC[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x02,0x03,0xC0,0x00,0x06,0x07,0x80,0x00,0x07,0x3F,0x80,0x00,0x0F,0xFF,0x80,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x3F,0xFF,0xFF,0x80,0x3F,0xFF,0xFF,0x80,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x80,0xFE,0xF7,0xEF,0x00,0x7E,0x72,0xCE,0x00,0x3E,0x30,0xC8,0x00,0x3C,0x10,0x88,0x00,0x1E,0x00,0x08,0x00,0x0E,0x00,0x08,0x00,0x06,0x00,0x08,0x00,0x04,0x00,0x10,0x00,0x02,0x7C,0x10,0x00,0x02,0x44,0x20,0x00,0x01,0x00,0x40,0x00,0x00,0xE1,0x80,0x00,0x00,0x1E,0x00,0x00 }; 

const byte p2C[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x00,0x00,0xFF,0xC0,0x00,0x01,0xFF,0xC0,0x00,0x03,0xFF,0xE0,0x00,0x17,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFE,0x3E,0x00,0x1F,0xFC,0xDE,0x00,0x1F,0xFD,0x2E,0x00,0x1F,0x30,0xCF,0x00,0x1F,0x00,0x07,0x00,0x1F,0x00,0x06,0x80,0x1F,0x80,0x0E,0x00,0x1F,0x90,0x8E,0x00,0x3F,0x8F,0x0E,0x00,0x1F,0x40,0x1C,0x00,0x0F,0x20,0x7C,0x00,0x0F,0x1F,0xFC,0x00,0x0F,0x00,0x7C,0x00,0x0F,0x00,0x7C,0x00,0x07,0x00,0x7C,0x00,0x07,0x00,0x74,0x00,0x06,0x00,0x40,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 
const byte p2N[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x00,0x00,0xFF,0xC0,0x00,0x01,0xFF,0xC0,0x00,0x03,0xFF,0xE0,0x00,0x17,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFE,0x3E,0x00,0x1F,0xFC,0xDE,0x00,0x1F,0xFD,0x2E,0x00,0x1F,0x30,0xCF,0x00,0x1F,0x00,0x07,0x00,0x1F,0x00,0x06,0x80,0x1F,0x8C,0x0E,0x00,0x1F,0x92,0x0E,0x00,0x3F,0x8C,0x0E,0x00,0x1F,0x40,0x1C,0x00,0x0F,0x20,0x7C,0x00,0x0F,0x1F,0xFC,0x00,0x0F,0x00,0x7C,0x00,0x0F,0x00,0x7C,0x00,0x07,0x00,0x7C,0x00,0x07,0x00,0x74,0x00,0x06,0x00,0x40,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 
const byte p2PC[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x00,0x00,0xFF,0xC0,0x00,0x01,0xFF,0xC0,0x00,0x03,0xFF,0xE0,0x00,0x17,0xFF,0xF8,0x00,0x1F,0xFF,0xF8,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFE,0x3E,0x00,0x1F,0xFC,0xDE,0x00,0x1F,0xFD,0x2E,0x00,0x1F,0x30,0xCF,0x00,0x1F,0x00,0x07,0x00,0x1F,0x00,0x06,0x80,0x1F,0x80,0x0E,0x00,0x1F,0x9C,0x0E,0x00,0x3F,0x92,0x0E,0x00,0x1F,0x40,0x1C,0x00,0x0F,0x20,0x7C,0x00,0x0F,0x1F,0xFC,0x00,0x0F,0x00,0x7C,0x00,0x0F,0x00,0x7C,0x00,0x07,0x00,0x7C,0x00,0x07,0x00,0x74,0x00,0x06,0x00,0x40,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 

const byte p3C[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,0x03,0xFF,0xE0,0x00,0x07,0xFF,0xF0,0x00,0x0F,0xFF,0xF8,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xC0,0x7D,0xB6,0xDB,0xC0,0x7C,0x92,0x4B,0x80,0x7C,0x00,0x01,0x80,0x3C,0x50,0xA1,0x80,0x3C,0x20,0x41,0x00,0x3C,0x00,0x01,0x00,0x1C,0x00,0x03,0x00,0x1C,0x00,0x02,0x00,0x1C,0x00,0x02,0x00,0x0E,0x04,0x82,0x00,0x0E,0x07,0x84,0x00,0x07,0x00,0x04,0x00,0x06,0x00,0x08,0x00,0x03,0x00,0x18,0x00,0x01,0x80,0x60,0x00,0x00,0xFF,0xC0,0x00,0x00,0x1E,0x00,0x00 }; 
const byte p3N[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,0x03,0xFF,0xE0,0x00,0x07,0xFF,0xF0,0x00,0x0F,0xFF,0xF8,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xC0,0x7D,0xB6,0xDB,0xC0,0x7C,0x92,0x4B,0x80,0x7C,0x00,0x01,0x80,0x3C,0x70,0xE1,0x80,0x3C,0x00,0x01,0x00,0x3C,0x00,0x01,0x00,0x1C,0x00,0x03,0x00,0x1C,0x00,0x02,0x00,0x1C,0x00,0x02,0x00,0x0E,0x00,0x02,0x00,0x0E,0x02,0x04,0x00,0x07,0x03,0x84,0x00,0x06,0x00,0x08,0x00,0x03,0x00,0x18,0x00,0x01,0x80,0x60,0x00,0x00,0xFF,0xC0,0x00,0x00,0x1E,0x00,0x00 }; 
const byte p3PC[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,0x03,0xFF,0xE0,0x00,0x07,0xFF,0xF0,0x00,0x0F,0xFF,0xF8,0x00,0x1F,0xFF,0xFC,0x00,0x1F,0xFF,0xFC,0x00,0x3F,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xC0,0x7D,0xB6,0xDB,0xC0,0x7C,0x92,0x4B,0x80,0x7C,0x00,0x01,0x80,0x3C,0x70,0xE1,0x80,0x3C,0x20,0x41,0x00,0x3C,0x00,0x01,0x00,0x1C,0x00,0x03,0x00,0x1C,0x00,0x02,0x00,0x1C,0x09,0x02,0x00,0x0E,0x0F,0x02,0x00,0x0E,0x09,0x04,0x00,0x07,0x00,0x04,0x00,0x06,0x00,0x08,0x00,0x03,0x00,0x18,0x00,0x01,0x80,0x60,0x00,0x00,0xFF,0xC0,0x00,0x00,0x1E,0x00,0x00 }; 

const byte p4C[] PROGMEM = { 26,29,0x00,0x1F,0xE0,0x00,0x01,0xFF,0xF8,0x00,0x03,0xFF,0xFC,0x00,0x0F,0xFF,0xFE,0x00,0x1F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xF8,0x1F,0xC0,0xFF,0xF7,0xCF,0xC0,0xFF,0xEF,0xEF,0xC0,0xFF,0xEF,0xE7,0xC0,0xFF,0xDF,0x37,0xC0,0xFF,0x9E,0xD7,0xC0,0xFC,0x1E,0xD7,0xC0,0x79,0xCE,0x97,0xC0,0x7A,0x20,0xFC,0x80,0x79,0xC0,0x70,0x80,0x78,0x00,0x00,0x80,0x38,0x00,0x00,0x80,0x38,0x00,0x01,0x00,0x18,0x00,0x01,0x00,0x1C,0x0F,0x01,0x00,0x0C,0x19,0x82,0x00,0x04,0x06,0x02,0x00,0x02,0x06,0x04,0x00,0x01,0x80,0x18,0x00,0x00,0xE0,0x70,0x00,0x00,0x3F,0xC0,0x00 }; 
const byte p4N[] PROGMEM = { 26,29,0x00,0x1F,0xE0,0x00,0x01,0xFF,0xF8,0x00,0x03,0xFF,0xFC,0x00,0x0F,0xFF,0xFE,0x00,0x1F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xF8,0x1F,0xC0,0xFF,0xF7,0xCF,0xC0,0xFF,0xEF,0xEF,0xC0,0xFF,0xEF,0xE7,0xC0,0xFF,0xDF,0x37,0xC0,0xFF,0x9E,0xD7,0xC0,0xFC,0x1E,0xD7,0xC0,0x79,0xCE,0x97,0xC0,0x7A,0x20,0xFC,0x80,0x79,0xC0,0x70,0x80,0x78,0x00,0x00,0x80,0x38,0x00,0x00,0x80,0x38,0x00,0x01,0x00,0x18,0x00,0x01,0x00,0x1C,0x0F,0x01,0x00,0x0C,0x19,0x82,0x00,0x04,0x06,0x02,0x00,0x02,0x00,0x04,0x00,0x01,0x80,0x18,0x00,0x00,0xE0,0x70,0x00,0x00,0x3F,0xC0,0x00 }; 
const byte p4PC[] PROGMEM = { 26,29,0x00,0x1F,0xE0,0x00,0x01,0xFF,0xF8,0x00,0x03,0xFF,0xFC,0x00,0x0F,0xFF,0xFE,0x00,0x1F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xF8,0x1F,0xC0,0xFF,0xF7,0xCF,0xC0,0xFF,0xEF,0xEF,0xC0,0xFF,0xEF,0xE7,0xC0,0xFF,0xDF,0x37,0xC0,0xFF,0x9E,0xD7,0xC0,0xFC,0x1E,0xD7,0xC0,0x79,0xCE,0x97,0xC0,0x7A,0x20,0xFC,0x80,0x79,0xC0,0x70,0x80,0x78,0x00,0x00,0x80,0x38,0x00,0x00,0x80,0x38,0x00,0x01,0x00,0x18,0x00,0x01,0x00,0x1C,0x00,0x01,0x00,0x0C,0x3C,0x02,0x00,0x04,0x20,0x02,0x00,0x02,0x00,0x04,0x00,0x01,0x80,0x18,0x00,0x00,0xE0,0x70,0x00,0x00,0x3F,0xC0,0x00 }; 

const byte p5C[] PROGMEM = { 26,29,0x0C,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xFF,0xC4,0x00,0x03,0xFF,0xF2,0x00,0x0F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0xF0,0xFF,0xFF,0xC0,0xE0,0x7F,0xFF,0xC0,0x60,0x3F,0xFF,0xC0,0x60,0x1F,0xFF,0x40,0x60,0x0F,0xFC,0x40,0x60,0x07,0x00,0x40,0x61,0xE0,0x3C,0x40,0x20,0xA0,0x28,0x40,0x30,0x60,0x30,0x40,0x30,0x00,0x00,0x40,0x10,0x00,0x00,0x40,0x10,0x00,0x00,0x40,0x08,0x00,0x00,0xC0,0x08,0x00,0x00,0x80,0x0C,0x40,0x00,0x80,0x04,0x20,0x01,0x00,0x02,0x1C,0x02,0x00,0x01,0x00,0x06,0x00,0x00,0xC0,0x18,0x00,0x00,0x3F,0xE0,0x00 }; 
const byte p5N[] PROGMEM = { 26,29,0x0C,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xFF,0xC4,0x00,0x03,0xFF,0xF2,0x00,0x0F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0xF0,0xFF,0xFF,0xC0,0xE0,0x7F,0xFF,0xC0,0x60,0x3F,0xFF,0xC0,0x60,0x1F,0xFF,0x40,0x60,0x0F,0xFC,0x40,0x60,0x07,0x00,0x40,0x61,0xE0,0x3C,0x40,0x20,0xA0,0x28,0x40,0x30,0x60,0x30,0x40,0x30,0x00,0x00,0x40,0x10,0x00,0x00,0x40,0x10,0x00,0x00,0x40,0x08,0x00,0x00,0xC0,0x08,0x00,0x00,0x80,0x0C,0x00,0x00,0x80,0x04,0x03,0xE1,0x00,0x02,0x03,0xE2,0x00,0x01,0x00,0x06,0x00,0x00,0xC0,0x18,0x00,0x00,0x3F,0xE0,0x00 }; 
const byte p5PC[] PROGMEM = { 26,29,0x0C,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xFF,0xC4,0x00,0x03,0xFF,0xF2,0x00,0x0F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0xFF,0xFF,0xFF,0xC0,0xF0,0xFF,0xFF,0xC0,0xE0,0x7F,0xFF,0xC0,0x60,0x3F,0xFF,0xC0,0x60,0x1F,0xFF,0x40,0x60,0x0F,0xFC,0x40,0x60,0x07,0x00,0x40,0x61,0xE0,0x3C,0x40,0x20,0xC0,0x18,0x40,0x30,0x60,0x30,0x40,0x30,0x00,0x00,0x40,0x10,0x00,0x00,0x40,0x10,0x00,0x00,0x40,0x08,0x00,0x00,0xC0,0x08,0x00,0x00,0x80,0x0C,0x03,0xF0,0x80,0x04,0x05,0x51,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x06,0x00,0x00,0xC0,0x18,0x00,0x00,0x3F,0xE0,0x00 }; 

const byte p6C[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x03,0xFF,0xF8,0x00,0x5F,0xFF,0xFC,0x00,0x5F,0xFF,0xFE,0x00,0x7F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0x5F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0xC0,0x3F,0xFF,0xFF,0xC0,0xBF,0x00,0x00,0x40,0xBF,0x04,0x10,0x40,0xFF,0xDA,0x2C,0x40,0x3F,0xC0,0x00,0x40,0x3F,0x80,0x00,0x40,0xBF,0x80,0x00,0x40,0xBF,0x88,0x10,0x80,0xFF,0xC4,0x21,0x80,0x3F,0xE3,0xC3,0x00,0xBF,0xB0,0x06,0x00,0xBF,0x8F,0xF8,0x00,0xFF,0x80,0x00,0x00,0x3F,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,0xBF,0x80,0x00,0x00,0xFF,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0xBF,0x80,0x00,0x00,0xFF,0x00,0x00,0x00 }; 
const byte p6N[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x03,0xFF,0xF8,0x00,0x5F,0xFF,0xFC,0x00,0x5F,0xFF,0xFE,0x00,0x7F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0x5F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0xC0,0x3F,0xFF,0xFF,0xC0,0xBF,0x00,0x00,0x40,0xBF,0x04,0x10,0x40,0xFF,0xDA,0x2C,0x40,0x3F,0xC0,0x00,0x40,0x3F,0x80,0x00,0x40,0xBF,0x80,0x00,0x40,0xBF,0x80,0x40,0x80,0xFF,0xC0,0x71,0x80,0x3F,0xE0,0x03,0x00,0xBF,0xB0,0x06,0x00,0xBF,0x8F,0xF8,0x00,0xFF,0x80,0x00,0x00,0x3F,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,0xBF,0x80,0x00,0x00,0xFF,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0xBF,0x80,0x00,0x00,0xFF,0x00,0x00,0x00 }; 
const byte p6PC[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x03,0xFF,0xF8,0x00,0x5F,0xFF,0xFC,0x00,0x5F,0xFF,0xFE,0x00,0x7F,0xFF,0xFF,0x00,0x1F,0xFF,0xFF,0x80,0x5F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0xC0,0x3F,0xFF,0xFF,0xC0,0xBF,0x00,0x00,0x40,0xBF,0x00,0x00,0x40,0xFF,0xDA,0x2C,0x40,0x3F,0xC4,0x10,0x40,0x3F,0x80,0x00,0x40,0xBF,0x80,0x00,0x40,0xBF,0x80,0x00,0x80,0xFF,0xC3,0x81,0x80,0x3F,0xE7,0xC3,0x00,0xBF,0xB0,0x06,0x00,0xBF,0x8F,0xF8,0x00,0xFF,0x80,0x00,0x00,0x3F,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,0xBF,0x80,0x00,0x00,0xFF,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0xBF,0x80,0x00,0x00,0xFF,0x00,0x00,0x00 }; 

const byte pC[] PROGMEM = { 26,29,0xC2,0x18,0xC0,0x00,0xE7,0x3B,0xCE,0x00,0x65,0xEE,0x7A,0x00,0x5E,0xC6,0x62,0x00,0x4A,0x01,0xC3,0xC0,0x68,0x20,0x80,0xC0,0x29,0xC0,0x70,0x80,0x22,0x00,0x09,0x80,0x31,0xC0,0xE1,0x00,0x12,0x21,0x13,0x00,0x12,0xA1,0x56,0x00,0x11,0xC0,0xE4,0x00,0x18,0x08,0x04,0x00,0x08,0x08,0x04,0x00,0x18,0x0C,0x0C,0x00,0x10,0x0C,0x08,0x00,0x10,0x0C,0x08,0x00,0x10,0x00,0x08,0x00,0x19,0xC0,0xEC,0x00,0x08,0x80,0x44,0x00,0x0C,0x80,0x44,0x00,0x04,0xFF,0xCC,0x00,0x06,0x00,0x18,0x00,0x07,0xF0,0x70,0x00,0x00,0x1F,0xC0,0x00,0x00,0x63,0x00,0x00,0x00,0x5D,0x00,0x00,0x00,0x5D,0x00,0x00,0x00,0x63,0x00,0x00 }; 
const byte pN[] PROGMEM = { 26,29,0xC2,0x18,0xC0,0x00,0xE7,0x3B,0xCE,0x00,0x65,0xEE,0x7A,0x00,0x5E,0xC6,0x62,0x00,0x4A,0x01,0x43,0xC0,0x68,0x00,0x00,0xC0,0x29,0xE1,0xE0,0x80,0x20,0x00,0x01,0x80,0x31,0xC0,0xE1,0x00,0x12,0x61,0x33,0x00,0x12,0x21,0x16,0x00,0x11,0xC0,0xE4,0x00,0x18,0x08,0x04,0x00,0x08,0x08,0x04,0x00,0x18,0x0C,0x0C,0x00,0x10,0x0C,0x08,0x00,0x10,0x0C,0x08,0x00,0x10,0x00,0x08,0x00,0x19,0x00,0x4C,0x00,0x08,0xFF,0x84,0x00,0x0C,0x00,0x04,0x00,0x04,0x00,0x0C,0x00,0x06,0x00,0x18,0x00,0x07,0xF0,0x70,0x00,0x00,0x1F,0xC0,0x00,0x00,0x63,0x00,0x00,0x00,0x5D,0x00,0x00,0x00,0x5D,0x00,0x00,0x00,0x63,0x00,0x00 }; 
const byte pPC[] PROGMEM = { 26,29,0xC2,0x18,0xC0,0x00,0xE7,0x3B,0xCE,0x00,0x65,0xEE,0x7A,0x00,0x5E,0xC6,0x62,0x00,0x4A,0x00,0x03,0xC0,0x68,0x00,0x00,0xC0,0x29,0xE1,0xE0,0x80,0x20,0x33,0x01,0x80,0x31,0xC0,0xE1,0x00,0x12,0x21,0x13,0x00,0x12,0x61,0x36,0x00,0x11,0xC0,0xE4,0x00,0x18,0x08,0x04,0x00,0x08,0x08,0x04,0x00,0x18,0x0C,0x0C,0x00,0x10,0x0C,0x08,0x00,0x10,0x0C,0x08,0x00,0x10,0x00,0x08,0x00,0x18,0x7F,0x8C,0x00,0x08,0x80,0x44,0x00,0x0C,0x00,0x04,0x00,0x04,0x00,0x0C,0x00,0x06,0x00,0x18,0x00,0x07,0xF0,0x70,0x00,0x00,0x1F,0xC0,0x00,0x00,0x63,0x00,0x00,0x00,0x5D,0x00,0x00,0x00,0x5D,0x00,0x00,0x00,0x63,0x00,0x00 }; 

const byte p7C[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0xFF,0x80,0x00,0x03,0xFF,0xE0,0x00,0x07,0xFF,0xE0,0x00,0x07,0xFF,0xF0,0x00,0x0F,0xF9,0xFC,0x00,0x0F,0xC0,0x3C,0x00,0x1F,0xBF,0xDE,0x00,0x1F,0x7F,0xEE,0x00,0x3F,0xFF,0xFE,0x00,0xFF,0xFF,0xFE,0x00,0xFF,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x3F,0xDF,0xEF,0x80,0x3F,0x83,0x1F,0x80,0x3E,0x80,0x37,0x00,0x1E,0x50,0x83,0x00,0x1F,0x09,0x03,0x00,0x0F,0x00,0x06,0x00,0x0F,0x00,0x06,0x00,0x07,0x04,0x44,0x00,0x07,0x03,0x80,0x00,0x01,0x80,0x00,0x00,0x00,0x80,0x00,0x00 }; 
const byte p7N[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0xFF,0x80,0x00,0x03,0xFF,0xE0,0x00,0x07,0xFF,0xE0,0x00,0x07,0xFF,0xF0,0x00,0x0F,0xF9,0xFC,0x00,0x0F,0xC0,0x3C,0x00,0x1F,0xBF,0xDE,0x00,0x1F,0x7F,0xEE,0x00,0x3F,0xFF,0xFE,0x00,0xFF,0xFF,0xFE,0x00,0xFF,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x3F,0xDF,0xEF,0x80,0x3F,0x83,0x1F,0x80,0x3E,0x80,0x37,0x00,0x1E,0x50,0x83,0x00,0x1F,0x19,0x83,0x00,0x0F,0x00,0x06,0x00,0x0F,0x00,0x06,0x00,0x07,0x00,0x44,0x00,0x07,0x03,0x80,0x00,0x01,0x80,0x00,0x00,0x00,0x80,0x00,0x00 }; 
const byte p7PC[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0xFF,0x80,0x00,0x03,0xFF,0xE0,0x00,0x07,0xFF,0xE0,0x00,0x07,0xFF,0xF0,0x00,0x0F,0xF9,0xFC,0x00,0x0F,0xC0,0x3C,0x00,0x1F,0xBF,0xDE,0x00,0x1F,0x7F,0xEE,0x00,0x3F,0xFF,0xFE,0x00,0xFF,0xFF,0xFE,0x00,0xFF,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x3F,0xDF,0xEF,0x80,0x3F,0x83,0x1F,0x80,0x3E,0x80,0x37,0x00,0x1E,0x59,0x83,0x00,0x1F,0x09,0x03,0x00,0x0F,0x00,0x06,0x00,0x0F,0x00,0x06,0x00,0x07,0x00,0x04,0x00,0x07,0x03,0x80,0x00,0x01,0x84,0x00,0x00,0x00,0x80,0x00,0x00 }; 

const byte p8C[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x00,0x00,0x7F,0x80,0x00,0x00,0xFF,0x00,0x00,0x07,0xFF,0xF0,0x00,0x1F,0xFF,0xF8,0x00,0x3F,0xFF,0xFC,0x00,0x3F,0xFF,0xFC,0x00,0x7F,0xFF,0xFC,0x00,0x7F,0xFF,0xFE,0x00,0x7F,0xFF,0xFE,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x00,0x7F,0xBE,0xFE,0x00,0x7F,0x2C,0x9C,0x00,0x7F,0x00,0x0E,0x00,0x7C,0x71,0xC6,0x00,0x3C,0x00,0x0E,0x00,0x7C,0x00,0x0E,0x00,0x7C,0x00,0x0C,0x00,0x7C,0x00,0x0C,0x00,0x7C,0x10,0x1C,0x00,0x3E,0x0F,0x18,0x00,0x3E,0x00,0x30,0x00,0x17,0x80,0xF0,0x00,0x12,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00 }; 
const byte p8N[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x00,0x00,0x7F,0x80,0x00,0x00,0xFF,0x00,0x00,0x07,0xFF,0xF0,0x00,0x1F,0xFF,0xF8,0x00,0x3F,0xFF,0xFC,0x00,0x3F,0xFF,0xFC,0x00,0x7F,0xFF,0xFC,0x00,0x7F,0xFF,0xFE,0x00,0x7F,0xFF,0xFE,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x00,0x7F,0xBE,0xFE,0x00,0x7F,0x2C,0x9C,0x00,0x7F,0x00,0x0E,0x00,0x7C,0x71,0xC6,0x00,0x3C,0x00,0x0E,0x00,0x7C,0x00,0x0E,0x00,0x7C,0x00,0x0C,0x00,0x7C,0x00,0x0C,0x00,0x7C,0x00,0x1C,0x00,0x3E,0x0F,0x18,0x00,0x3E,0x00,0x30,0x00,0x17,0x80,0xF0,0x00,0x12,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00 }; 
const byte p8PC[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x00,0x00,0x7F,0x80,0x00,0x00,0xFF,0x00,0x00,0x07,0xFF,0xF0,0x00,0x1F,0xFF,0xF8,0x00,0x3F,0xFF,0xFC,0x00,0x3F,0xFF,0xFC,0x00,0x7F,0xFF,0xFC,0x00,0x7F,0xFF,0xFE,0x00,0x7F,0xFF,0xFE,0x00,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x80,0x7F,0xFF,0xFF,0x00,0x7F,0xBE,0xFE,0x00,0x7F,0x2C,0x9C,0x00,0x7F,0x00,0x0E,0x00,0x7C,0x71,0xC6,0x00,0x3C,0x00,0x0E,0x00,0x7C,0x00,0x0E,0x00,0x7C,0x00,0x0C,0x00,0x7C,0x00,0x0C,0x00,0x7C,0x00,0x1C,0x00,0x3E,0x0F,0x18,0x00,0x3E,0x10,0x30,0x00,0x17,0x80,0xF0,0x00,0x12,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00 }; 

const byte p9C[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0xC0,0x00,0x01,0x0F,0xF0,0x00,0x03,0xFF,0xFC,0x00,0x0D,0x7F,0xEA,0x00,0x1D,0x7F,0xEB,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xF7,0xFF,0x80,0x7F,0xFB,0xFF,0x80,0x7F,0xFD,0xEF,0xC0,0x7F,0xFE,0x4F,0x80,0x7F,0xC3,0x8F,0x80,0x7F,0xC8,0x47,0x80,0x7B,0xD4,0xA7,0xC0,0x7B,0xC0,0x07,0xC0,0x79,0x80,0x07,0xC0,0x79,0x80,0x07,0xC0,0x78,0xC4,0x0F,0xC0,0x78,0xC3,0x0F,0x80,0x7C,0x60,0x1F,0x80,0x78,0x10,0x27,0x80,0x38,0x0F,0xC7,0x00,0x38,0x00,0x03,0x00,0x18,0x00,0x02,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 
const byte p9N[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0xC0,0x00,0x01,0x0F,0xF0,0x00,0x03,0xFF,0xFC,0x00,0x0D,0x7F,0xEA,0x00,0x1D,0x7F,0xEB,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xF7,0xFF,0x80,0x7F,0xFB,0xFF,0x80,0x7F,0xFD,0xEF,0xC0,0x7F,0xFE,0x4F,0x80,0x7F,0xC3,0x8F,0x80,0x7F,0xC8,0x47,0x80,0x7B,0xD4,0xA7,0xC0,0x7B,0xC0,0x07,0xC0,0x79,0x80,0x07,0xC0,0x79,0x84,0x07,0xC0,0x78,0xC3,0x0F,0xC0,0x78,0xC4,0x0F,0x80,0x7C,0x60,0x1F,0x80,0x78,0x10,0x27,0x80,0x38,0x0F,0xC7,0x00,0x38,0x00,0x03,0x00,0x18,0x00,0x02,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 
const byte p9PC[] PROGMEM = { 26,29,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0xC0,0x00,0x01,0x0F,0xF0,0x00,0x03,0xFF,0xFC,0x00,0x0D,0x7F,0xEA,0x00,0x1D,0x7F,0xEB,0x00,0x3F,0xFF,0xFF,0x00,0x3F,0xF7,0xFF,0x80,0x7F,0xFB,0xFF,0x80,0x7F,0xFD,0xEF,0xC0,0x7F,0xFE,0x4F,0x80,0x7F,0xC3,0x8F,0x80,0x7F,0xC0,0x07,0x80,0x7B,0xD4,0xA7,0xC0,0x7B,0xC8,0x47,0xC0,0x79,0x80,0x07,0xC0,0x79,0x80,0x07,0xC0,0x78,0xC7,0x0F,0xC0,0x78,0xC4,0x0F,0x80,0x7C,0x60,0x1F,0x80,0x78,0x10,0x27,0x80,0x38,0x0F,0xC7,0x00,0x38,0x00,0x03,0x00,0x18,0x00,0x02,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; 

const byte p10C[] PROGMEM = { 26,29,0x06,0x00,0x03,0x00,0x07,0x3F,0xC7,0x00,0x05,0xE0,0x7C,0x80,0x08,0x80,0x08,0x80,0x0C,0x80,0x09,0x80,0x1A,0x40,0x12,0x80,0x28,0x80,0x08,0x80,0x6F,0x80,0x0F,0x80,0x46,0x18,0x33,0xC0,0xC0,0x18,0x30,0x40,0x80,0x03,0x80,0x40,0x8E,0x01,0x83,0x40,0x9B,0x86,0xC7,0xC0,0x94,0xFC,0x7C,0xC0,0x94,0x50,0x28,0xC0,0x94,0x50,0x28,0xC0,0x94,0x20,0x11,0x80,0xD4,0x20,0x10,0xC0,0x54,0x00,0x00,0xC0,0x54,0x00,0x00,0xC0,0x2C,0x00,0x00,0xC0,0x3A,0x00,0x01,0x40,0x1A,0x00,0x01,0x40,0x0C,0x08,0x83,0x40,0x0D,0x0F,0x86,0x40,0x15,0x07,0x0F,0x80,0x19,0x80,0x39,0x80,0x09,0xF0,0xF7,0x00,0x07,0x3F,0xC2,0x00 }; 
const byte p10N[] PROGMEM = { 26,29,0x06,0x00,0x03,0x00,0x07,0x3F,0xC7,0x00,0x05,0xE0,0x7C,0x80,0x08,0x80,0x08,0x80,0x0C,0x80,0x09,0x80,0x1A,0x40,0x12,0x80,0x28,0x80,0x08,0x80,0x6F,0x80,0x0F,0x80,0x46,0x18,0x33,0xC0,0xC0,0x18,0x30,0x40,0x80,0x03,0x80,0x40,0x8E,0x01,0x83,0x40,0x9B,0x86,0xC7,0xC0,0x94,0xFC,0x7C,0xC0,0x94,0x50,0x28,0xC0,0x94,0x50,0x28,0xC0,0x94,0x20,0x11,0x80,0xD4,0x20,0x10,0xC0,0x54,0x00,0x00,0xC0,0x54,0x00,0x00,0xC0,0x2C,0x00,0x00,0xC0,0x3A,0x00,0x01,0x40,0x1A,0x0F,0x81,0x40,0x0C,0x08,0x83,0x40,0x0D,0x08,0x86,0x40,0x15,0x07,0x0F,0x80,0x19,0x80,0x39,0x80,0x09,0xF0,0xF7,0x00,0x07,0x3F,0xC2,0x00 }; 
const byte p10PC[] PROGMEM = { 26,29,0x06,0x00,0x03,0x00,0x07,0x3F,0xC7,0x00,0x05,0xE0,0x7C,0x80,0x08,0x80,0x08,0x80,0x0C,0x80,0x09,0x80,0x1A,0x40,0x12,0x80,0x28,0x80,0x08,0x80,0x6F,0x80,0x0F,0x80,0x46,0x18,0x33,0xC0,0xC0,0x18,0x30,0x40,0x80,0x03,0x80,0x40,0x8E,0x01,0x83,0x40,0x9B,0x86,0xC7,0xC0,0x94,0xFC,0x7C,0xC0,0x94,0x50,0x28,0xC0,0x94,0x50,0x28,0xC0,0x94,0x20,0x11,0x80,0xD4,0x20,0x10,0xC0,0x54,0x00,0x00,0xC0,0x54,0x00,0x00,0xC0,0x2C,0x00,0x00,0xC0,0x3A,0x00,0x01,0x40,0x1A,0x00,0x01,0x40,0x0C,0x07,0x03,0x40,0x0D,0x0D,0x86,0x40,0x15,0x00,0x0F,0x80,0x19,0x80,0x39,0x80,0x09,0xF0,0xF7,0x00,0x07,0x3F,0xC2,0x00 }; 


#define NB_MESSAGE 4
#define X_MESSAGE 40
#define Y_MESSAGE 15
uint8_t currentMessage;
const char* const bonjours[NB_MESSAGE] = {
  "Yooo",
  "Hello",
  "Bonjour",
  "Yop"
};

const char* const aurevoir[NB_MESSAGE] = {
  "Tcho",
  "Merci",
  "  A+",
  "  Hummm"
};

const char* const aurevoirPasContent[NB_MESSAGE] = {
  " Howww",
  " Greee",
  " pfeevv",
  " rrrre"
};

const byte TitleScreen[] PROGMEM = { 64,36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD0,0x89,0xC0,0x00,0x00,0x00,0x00,0x01,0x11,0x54,0x80,0x00,0x61,0x0C,0x60,0x01,0x51,0xD0,0x80,0x00,0x73,0x9D,0xE7,0x01,0x51,0x54,0x80,0x00,0x32,0xF7,0x3D,0x00,0xDD,0x49,0xC0,0x00,0x2F,0x63,0x31,0x00,0x00,0x00,0x00,0x00,0x25,0x00,0xE1,0xE0,0x00,0x00,0x00,0x00,0x34,0x10,0x40,0x60,0x00,0x00,0x00,0x00,0x14,0xE0,0x38,0x40,0x0D,0x08,0x88,0x00,0x11,0x00,0x04,0xC0,0x11,0x15,0x54,0x00,0x18,0xE0,0x70,0x80,0x15,0x1D,0x1C,0x00,0x09,0x10,0x89,0x80,0x15,0x15,0x54,0x00,0x09,0x50,0xAB,0x00,0x0D,0xD4,0x94,0x00,0x08,0xE0,0x72,0x00,0x00,0x00,0x00,0x00,0x0C,0x04,0x02,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x02,0x00,0x00,0x00,0x00,0x00,0x0C,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x08,0x06,0x04,0x00,0x00,0x00,0x00,0x00,0x08,0x06,0x04,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x04,0x0C,0x70,0x00,0x00,0x00,0x0C,0xE0,0x76,0x0C,0x88,0x00,0x00,0x00,0x04,0x40,0x22,0x13,0x54,0x00,0x00,0x00,0x06,0x40,0x22,0x61,0x24,0x00,0x00,0x00,0x02,0x7F,0xE6,0x61,0x54,0x00,0x00,0x00,0x03,0x00,0x0C,0x12,0x88,0x00,0x00,0x00,0x03,0xF8,0x38,0x3F,0xF8,0x00,0x00,0x00,0x00,0x0F,0xE0,0x15,0x50,0x00,0x00,0x00,0x00,0x31,0x80,0x0A,0xA0,0x00,0x00,0x00,0x00,0x2E,0x80,0x05,0x40,0x00,0x00,0x00,0x00,0x2E,0x80,0x02,0x80,0x00,0x00,0x00,0x00,0x31,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00 }; 

#define ARRIVE_CLIENT 1
#define CHOIX_CLIENT 11
#define CHOIX_VENDEUR 2
#define DEPART_CLIENT 3
#define DEPART_CLIENT_CALC 33
#define STATS 50
#define GAME_OVER 99

#define NB_MAX_BOULLE 2

uint8_t choixCornet;
uint8_t choixBoulle[NB_MAX_BOULLE];


int8_t choixCornetVendeur;
int8_t choixBoulleVendeur[NB_MAX_BOULLE];
int8_t currentChoixVendeur;

byte gameState;

#define MALUS_BOULLE 1
#define MALUS_CORNET 1
#define DEPART_CAGNOTE 5
int cagnotte;
int8_t clientPayer;

typedef struct {
  uint8_t lvl,prix,lvlMin;
  const byte * sprite;
}
Gout;

#define NB_GOUT 12
Gout allGout[NB_GOUT] = {
  {0,1,0,carreSimple},
  {0,1,0,rectangleSimple},
  {0,1,0,triangleSimple},
  {0,1,0,rondSimple},
  {0,2,0,rondMultip},
  {0,1,8,croixPleine},
  {0,2,10,rectanglePlein},
  {0,2,12,croixOuverte},
  {0,2,17,rondBarre},
  {0,2,22,trianglePois},
  {0,2,25,carreCroix},
  {0,1,30,rondCroix}
};

/*typedef struct {
  uint8_t lvl,prix,lvlMin;
  const byte * sprite;
}
Pot;*/
#define NB_POT 3
Gout allPots[NB_POT] = {
  {0,0,0,pot},
  {0,1,10,cornet},
  {0,2,18,luxeCornet}
};

uint8_t currentClient;
#define NB_ETAT_CLIENT 3
typedef struct {
  const byte * sprite[NB_ETAT_CLIENT];
}
Client;

#define NB_CLIENT 11
Client clients[NB_CLIENT] = {
  {pN,pC,pPC},
  {p1N,p1C,p1PC},
  {p2N,p2C,p2PC},
  {p3N,p3C,p3PC},
  {p4N,p4C,p4PC},
  {p5N,p5C,p5PC},
  {p6N,p6C,p6PC},
  {p7N,p7C,p7PC},
  {p8N,p8C,p8PC},
  {p9N,p9C,p9PC},
  {p10N,p10C,p10PC}
};


void setup()
{
  gb.begin();
  initPrograme();
}

void initPrograme()
{
  goTitleScreen();
  initGame();
}

void goTitleScreen()
{
  gb.titleScreen(TitleScreen);
  initGame();
}

void initGame()
{
  gb.battery.show = false;
  gameState = CHOIX_CLIENT;
  gb.pickRandomSeed();
  
  cagnotte = DEPART_CAGNOTE;
  initClient();
}
void initClient(){
  currentChoixVendeur = -1;
  choixCornetVendeur = -1;
  for(byte i=0;i<NB_MAX_BOULLE;i++){
    choixBoulleVendeur[i] = -1;
  }
  clientPayer = 0;
}

void loop()
{
  if(gb.update()) {
    if(gb.buttons.pressed(BTN_C)){
      goTitleScreen();
    }
    
    switch(gameState)
    {
      case CHOIX_CLIENT :
        loadChoixClient();
        drawArriveClient();
        initClient();
        gameState = ARRIVE_CLIENT;
      break;
      case ARRIVE_CLIENT :
        updateArriveClient();
        drawArriveClient();
      break;
      case CHOIX_VENDEUR :
        updateChoixVendeur();
        drawChoixVendeur();
      break;
      case DEPART_CLIENT_CALC :
        updateDepartClientCalc();
        drawDepartClient();
        gameState = DEPART_CLIENT; 
          
      break;
      case DEPART_CLIENT :
        updateDepartClient();
        drawDepartClient();
        //gameState = CHOIX_CLIENT;   
      break;
      case STATS :
                   
      break;
      case GAME_OVER :
                   
      break;
      
    }
    
    gb.display.cursorX = 0;
    gb.display.cursorY = 0;
    gb.display.print(cagnotte);
    gb.display.print("\34");
  }
}

/***************************************************************
*****************************DEPART CLIENT
***************************************************************/
boolean cornetIsOk;
byte glaceIsOk;
void updateDepartClientCalc()
{
  cornetIsOk = choixCornetVendeur == choixCornet;
  clientPayer += allPots[choixCornetVendeur].prix;
  if(cornetIsOk == false){
    clientPayer -= MALUS_CORNET;
  }
  glaceIsOk = NB_MAX_BOULLE;
  int8_t index[NB_MAX_BOULLE];  
  for(byte i=0;i<NB_MAX_BOULLE;i++){
    index[i] = -1;
  }
  
  for(byte i=0;i<NB_MAX_BOULLE;i++){
    clientPayer += allGout[choixBoulleVendeur[i]].prix;
    //index[i] = -1;
    for(byte t=0;t<NB_MAX_BOULLE;t++){
      if(index[t] == t){
        continue;
      }
      if(choixBoulleVendeur[i] == choixBoulle[t]){
        index[t] = t;
      }
    }
  }
  
  for(byte i=0;i<NB_MAX_BOULLE;i++){
    if(index[i] == -1){
      glaceIsOk--;
      clientPayer -= MALUS_BOULLE;
    }
  }
  
}

void updateDepartClient()
{
  if(gb.buttons.pressed(BTN_A)){
     gameState = CHOIX_CLIENT;
  }
}

void drawDepartClient()
{
  if(cornetIsOk && glaceIsOk == NB_MAX_BOULLE){
    gb.display.drawBitmap(4,10,clients[currentClient].sprite[1]);
    gb.display.cursorX = X_MESSAGE;
    gb.display.cursorY = Y_MESSAGE;
    gb.display.print(aurevoir[currentMessage]);
  }else {
    gb.display.drawBitmap(4,10,clients[currentClient].sprite[2]);
    gb.display.cursorX = X_MESSAGE;
    gb.display.cursorY = Y_MESSAGE;
    gb.display.print(aurevoirPasContent[currentMessage]);
  }
  gb.display.drawBitmap(28,10,bulleVide);
  gb.display.cursorX = 39;
  gb.display.cursorY = 27;
  gb.display.print(clientPayer);
  gb.display.print("\34");
}

/*******************************************************
**************************Vendeur 
********************************************************/
int8_t currentChoixInterface = 0;
void updateChoixVendeur()
{

  if(currentChoixVendeur<NB_MAX_BOULLE){
    if(currentChoixVendeur == -1){
      //on est sur le choix du cornet
      if(gb.buttons.pressed(BTN_A)){
        if(cagnotte>=allPots[currentChoixInterface].lvlMin){
          choixCornetVendeur= currentChoixInterface;
          currentChoixInterface = 0;
          currentChoixVendeur++;
        }
      }
    } else {
      //on est sur le choix des boulle
      if(gb.buttons.pressed(BTN_A)){
        if(cagnotte>=allGout[currentChoixInterface].lvlMin){
          choixBoulleVendeur[currentChoixVendeur] = currentChoixInterface;
          currentChoixVendeur++;
        }
      }
    }
  } else {
    //on est bloquer sur la glace il ne reste plus qu'a valider
      if(gb.buttons.pressed(BTN_A)){
        currentChoixVendeur=-1;
        gameState = DEPART_CLIENT_CALC;
      }
  }
  
  if(gb.buttons.pressed(BTN_B)){
    if(currentChoixVendeur == 0){
      
    }
    currentChoixVendeur--;
    if(currentChoixVendeur>-1) {
      currentChoixInterface = choixBoulleVendeur[currentChoixVendeur];
      choixBoulleVendeur[currentChoixVendeur] = -1;
    } else {
      currentChoixInterface = choixCornetVendeur;
      choixCornetVendeur = -1;
    }
  }
  //Sécurité currentChoixVendeur
  if(currentChoixVendeur<-1) {currentChoixVendeur = -1;}
  if(currentChoixVendeur>NB_MAX_BOULLE) {currentChoixVendeur = (NB_MAX_BOULLE-1);}
  
  
  if(currentChoixVendeur<0){
    if(gb.buttons.pressed(BTN_LEFT) || gb.buttons.pressed(BTN_UP)){
      currentChoixInterface--;
    }else if(gb.buttons.pressed(BTN_RIGHT) || gb.buttons.pressed(BTN_DOWN)){
      currentChoixInterface++;
    }
    if(currentChoixInterface >=NB_POT){
      currentChoixInterface = 0;
    } else if(currentChoixInterface <0){
      currentChoixInterface = NB_POT;
    }
  }else if(currentChoixVendeur<NB_MAX_BOULLE){
    if(gb.buttons.pressed(BTN_LEFT)){
      currentChoixInterface--;
    }else if(gb.buttons.pressed(BTN_RIGHT)){
      currentChoixInterface++;
    }else if(gb.buttons.pressed(BTN_UP)){
      currentChoixInterface += (NB_GOUT/2);
    }else if(gb.buttons.pressed(BTN_DOWN)){
      currentChoixInterface -= (NB_GOUT/2);
    }
    if(currentChoixInterface >=NB_GOUT){
      currentChoixInterface = currentChoixInterface - NB_GOUT;
    } else if(currentChoixInterface <0){
      currentChoixInterface = NB_GOUT + currentChoixInterface;
    }
  }
}

void drawChoixVendeur()
{
  //gb.display.print(choixCornetVendeur);
  byte y = 28;
  int8_t offsetX = 0;
    
  for(byte i=0;i<NB_GOUT;i++){
    if(i==6){
      y = 38;
      offsetX = 66;
    }
    byte x = (2 + (i*11))-offsetX;
    
    gb.display.drawBitmap(x,y,allGout[i].sprite);
    if(allGout[i].lvlMin>cagnotte){
      gb.display.setColor(INVERT);
      gb.display.fillRect(x,y,9,8);
      gb.display.setColor(BLACK);
    }
    if(currentChoixVendeur>=0){
      for(byte f=0;f<NB_MAX_BOULLE;f++){
        if(choixBoulleVendeur[f] == i){
          gb.display.drawRect((x-2),(y-1),12,11);
        }
      }
      if(currentChoixInterface == i && (gb.frameCount%10 > 4)){
        gb.display.drawRect((x-2),(y-1),12,11);
      }
    }
  }
  
  for(byte i=0;i<NB_POT;i++){
    byte y = 2+ (i*11);
    gb.display.drawBitmap(70,y,allPots[i].sprite);
    if(allPots[i].lvlMin>cagnotte){
      gb.display.setColor(INVERT);
      gb.display.fillRect(70,y,11,9);
      gb.display.setColor(BLACK);
    }
    if(currentChoixVendeur<0){
      if(currentChoixInterface == i && (gb.frameCount%10 > 4)){
        gb.display.drawRect(68,(y-2),16,12);
      }
    } else{
      if(choixCornetVendeur == i){
          gb.display.drawRect(68,(y-2),16,12);
      }
    }
  }
  
  for(byte f=0;f<NB_MAX_BOULLE;f++){
    if(choixBoulleVendeur[f] >-1){
      gb.display.drawBitmap(24 + (f*5),5,allGout[choixBoulleVendeur[f]].sprite);
    }
  }
  
  if(choixCornetVendeur>-1){
    gb.display.drawBitmap(25,13,allPots[choixCornetVendeur].sprite);
  }
  
  if(currentChoixVendeur == NB_MAX_BOULLE && (gb.frameCount%10 > 4)){
     gb.display.drawRect(22,3,16,22);
  }
}


/*******************************************************
**************************Arriver du client
********************************************************/
void loadChoixClient()
{
  currentClient = random(0,NB_CLIENT);
  choixCornet = random(0,NB_POT);
  for(byte i=0;i<NB_MAX_BOULLE;i++){
    choixBoulle[i] = random(0,NB_GOUT);
  }
  cagnotte += clientPayer;
  if(cagnotte<0)cagnotte=0;
  currentMessage = random(0,NB_MESSAGE);
}

void updateArriveClient()
{
    if(gb.buttons.pressed(BTN_A)){
        gameState = CHOIX_VENDEUR;
    }
}

void drawArriveClient()
{
  gb.display.drawBitmap(4,10,clients[currentClient].sprite[0]);
  gb.display.drawBitmap(28,10,bulleVide);
  gb.display.cursorX = X_MESSAGE;
  gb.display.cursorY = Y_MESSAGE;
  gb.display.print(bonjours[currentMessage]);
  gb.display.drawBitmap(37,23, allPots[choixCornet].sprite);
  for(byte i=0;i<NB_MAX_BOULLE;i++){
    gb.display.drawBitmap((57 + (i*11)),21,allGout[choixBoulle[i]].sprite);
  }
}
